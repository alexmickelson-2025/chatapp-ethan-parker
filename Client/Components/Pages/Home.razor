@page "/"
@rendermode InteractiveServer
@using Logic
@using Logic.Requests
@inject IConfiguration configuration
@inject HttpClient HttpClient

<PageTitle>Chat App</PageTitle>

<div>
    <button @onclick="GetAllMessages" class="refresh-button">Refresh Messages</button>
</div>

<div class="message-form">
    <label for="MessageUsername">Who are you?</label>
    <input id="MessageUsername" type="text" @bind="MessageUsername" class="input-field" />

    <label for="MessageContent">What is the content of your message?</label>
    <input id="MessageContent" type="text" @bind="MessageContent" class="input-field" />

    <label for="MessageImage">Attach an image (optional)</label>
    <InputFile id="MessageImage" OnChange="OnImageSelected" class="input-field" itemtype="png" />

    <button @onclick="PostMessage" class="submit-button">Submit</button>
</div>


@foreach (var message in Messages)
{
    <div class="message-container">
        @if (message.ImageUrl != null)
        {
            <img src="@($"{ImageApiUrl}/images/{message.ImageUrl}")" />
        }
        <p class="username">@message.Username</p>
        <p class="content">@message.Content</p>
        <p class="timestamp">@message.TimePosted (Lamport: @message.LamportNumber)</p>
        <p class="process-id">Process ID: @message.ProcessId</p>
    </div>
}
@code {
    private string ApiUri = "";
    public List<Message> Messages = new();

    public string MessageContent = "";
    public string MessageUsername = "";
    private string ProcessId = Guid.NewGuid().ToString();
    private int CurrentLamportNumber { get; set; } = 0;
    private IBrowserFile? SelectedImage { get; set; }

    private string ImageApiUrl { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        ApiUri = configuration["api"] ?? throw new Exception("API URI not found");
        ImageApiUrl = configuration["IMAGE_API_URL"] ?? throw new Exception("IMAGE_API_URL not configured");
        await GetAllMessages();
    }

    public async Task GetAllMessages()
    {
        try
        {
            var result = await HttpClient.GetFromJsonAsync<List<Message>>($"{ApiUri}/message/getall");

            if (result is not null)
            {
                Messages = result.OrderBy(x => x.LamportNumber).ThenBy(x => x.ProcessId).ToList();
                CurrentLamportNumber = Math.Max(Messages.Max(x => x.LamportNumber), CurrentLamportNumber);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching messages: {ex.Message}");
        }
    }

    public async Task PostMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageUsername) || string.IsNullOrWhiteSpace(MessageContent))
        {
            Console.WriteLine("Username or message content cannot be empty.");
            return;
        }

        try
        {
            using var content = new MultipartFormDataContent();

            content.Add(new StringContent(MessageUsername ?? ""), "username");
            content.Add(new StringContent(MessageContent ?? ""), "content");
            content.Add(new StringContent((++CurrentLamportNumber).ToString()), "lamport_number");
            content.Add(new StringContent(ProcessId), "process_id");

            if (SelectedImage != null)
            {
                var stream = SelectedImage.OpenReadStream();
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(SelectedImage.ContentType);
                content.Add(fileContent, "image", SelectedImage.Name);
            }

            var httpClient = new HttpClient();
            var response = await httpClient.PostAsync($"{ApiUri}/message/post", content);

            await GetAllMessages();
        }
        catch
        {

        }
    }

    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        if (e is not null)
        {
            SelectedImage = e.File;
        }
    }

}
