services:
  client:
    build: 
      context: .
      dockerfile: dev.Dockerfile
    command: dotnet run --project Client
    environment:
      - api=http://api:8080
      - IMAGE_API_URLS=http://localhost:8082;http://localhost:8083;http://localhost:8084
    ports:
      - 8080:8080
  api:
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: dotnet run --project Api
    environment:
      - CONNECTION_STRING=Server=db;Database=postgres;User Id=postgres;Password=postgres;
      - IMAGE_API_URLS=http://imageapi1:8080;http://imageapi2:8080;http://imageapi3:8080
      - INTERVAL_TIME=2000
  imageapi1:
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: dotnet run --project ImageApi
    environment:
      - INTERVAL_TIME=2000
      - REDIS_URL=cache:6379
    volumes:
      - image_data1:/app/ImageApi/wwwroot/images

  imageapi2:
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: dotnet run --project ImageApi
    environment:
      - INTERVAL_TIME=2000
      - REDIS_URL=cache:6379
    volumes:
      - image_data2:/app/ImageApi/wwwroot/images

  imageapi3:
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: dotnet run --project ImageApi
    environment:
      - INTERVAL_TIME=2000
      - REDIS_URL=cache:6379
    volumes:
      - image_data3:/app/ImageApi/wwwroot/images

  nginx:
    image: nginx:1.19.4
    depends_on:
      - api
      - imageapi1
      - imageapi2
      - imageapi3
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 8081:8081
      - 8082:8082
      - 8083:8083
      - 8084:8084
    
  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  cache:
    image: redis
    
volumes:
  postgres_data:
  image_data1:
  image_data2:
  image_data3:

